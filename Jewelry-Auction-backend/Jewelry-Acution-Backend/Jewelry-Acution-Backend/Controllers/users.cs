using Microsoft.AspNetCore.Mvc;
using Jewelry_Acution_Backend.Models; // Adjust the namespace as per your project structure
using Jewelry_Acution_Backend.Data; // Adjust the namespace for your DbContext
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.Data;

namespace Jewelry_Acution_Backend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class Users : Controller
    {
        private readonly AppDbContext _context;

        public Users(AppDbContext context)
        {
            _context = context;
        }

        [HttpPost("signup")]
        public async Task<ActionResult<SignupResponse>> Signup([FromBody] Signup signup)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Assuming that the ID is generated by the database.
            _context.Signups.Add(signup);
            await _context.SaveChangesAsync();

            // Create the response object
            var response = new SignupResponse
            {
                Message = "Registered User",
                User = signup
            };

            // Return CreatedAtAction with a success message and the user details
            return CreatedAtAction(nameof(Signup), new { id = signup.Id }, response);
        }

        public class SignupResponse
        {
            public string Message { get; set; }
            public Signup User { get; set; } // Include user details
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Signup>>> GetUsers()
        {
            var users = await _context.Signups.ToListAsync();
            return Ok(users);
        }

        [HttpPost("Login")]
        public async Task<IActionResult> Login([FromBody] Login request)
        {
            if (request == null || string.IsNullOrEmpty(request.Email) || string.IsNullOrEmpty(request.Password))
            {
                return BadRequest("Email and password are required");
            }

            // Find the user by email
            var user = await _context.Signups.FirstOrDefaultAsync(u => u.Email == request.Email);

            // Check if user exists
            if (user == null)
            {
                // Don't disclose whether the email or password was incorrect for security reasons
                return Unauthorized("Invalid email or password");
            }

            // Compare the passwords directly (not recommended for production)
            if (request.Password != user.Password) // Replace this with a hashed comparison in production
            {
                return Unauthorized("Invalid email or password");
            }

            // Return success message and user ID
            return Ok(new
            {
                Message = "Login successful",
                UserId = user.Id // Assuming 'Id' is the property for user ID in your model
            });
        }

    }

    // Model for Login Request
    public class Login
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
